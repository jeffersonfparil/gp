% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/load.R
\name{fn_filter_loci}
\alias{fn_filter_loci}
\title{Filter genotypes by:
\itemize{
\item minimum allele frequency,
\item minimum variation within locus (in an attempt to prevent duplicating the intercept)
\item loci identities using a SNP which specifies the SNP coordinates as well as the reference and alternative alleles
\item mean sparsity per locus
\item mean sparsity per sample/entry/pool
}}
\usage{
fn_filter_loci(
  G,
  maf = 0.01,
  sdev_min = 1e-04,
  max_sparsity_per_locus = NULL,
  frac_topmost_sparse_loci_to_remove = NULL,
  n_topmost_sparse_loci_to_remove = NULL,
  max_sparsity_per_sample = NULL,
  frac_topmost_sparse_samples_to_remove = NULL,
  n_topmost_sparse_samples_to_remove = NULL,
  fname_snp_list = NULL,
  verbose = FALSE
)
}
\arguments{
\item{G}{numeric n samples x p loci-alleles matrix of allele frequencies with non-null row and column names.
Row names can be any string of characters which identify the sample or entry or pool names.
Column names need to be tab-delimited, where first element refers to the chromosome or scaffold name,
the second should be numeric which refers to the position in the chromosome/scaffold, and
subsequent elements are optional which may refer to the allele identifier and other identifiers.}

\item{maf}{minimum allele frequency \link{Default=0.01}}

\item{sdev_min}{minimum allele frequency standard deviation (constant allele frequency across samples is just another intercept) \link{Default=0.0001}}

\item{max_sparsity_per_locus}{maximum mean sparsity per locus, e.g. 0.1 or 0.5 \link{Default=NULL}}

\item{frac_topmost_sparse_loci_to_remove}{fraction of the top-most sparse loci to remove, e.g. 0.01 or 0.25 \link{Default=NULL}}

\item{n_topmost_sparse_loci_to_remove}{number of top-most sparse loci to remove, e.g. 100 or 1000 \link{Default=NULL}}

\item{max_sparsity_per_sample}{maximum mean sparsity per sample, e.g. 0.3 or 0.5 \link{Default=NULL}}

\item{frac_topmost_sparse_samples_to_remove}{fraction of the top-most sparse samples to remove, e.g. 0.01 or 0.05 \link{Default=NULL}}

\item{n_topmost_sparse_samples_to_remove}{number of top-most sparse samples to remove, e.g. 5 or 10 \link{Default=NULL}}

\item{fname_snp_list}{name of the file containing the list of expected SNPs including their coordinates and alleles.
This is a tab-delimited file with 3 columns: '#CHROM', 'POS', 'REF,ALT', corresponding to \link{Default=NULL}
chromosome names (e.g. 'chr1' & 'chrom_1'),
numeric positions (e.g. 12345 & 100001), and
reference-alternative allele strings separated by a comma (e.g. 'A,T' & 'allele_1,allele_alt') \link{Default=NULL}}
}
\value{
Ok: numeric n samples x p loci-alleles matrix of allele frequencies with non-null row and column names.
Row names can be any string of characters which identify the sample or entry or pool names.
Column names need to be tab-delimited, where first element refers to the chromosome or scaffold name,
the second should be numeric which refers to the position in the chromosome/scaffold, and
subsequent elements are optional which may refer to the allele identifier and other identifiers.
Err: gpError
}
\description{
Filter genotypes by:
\itemize{
\item minimum allele frequency,
\item minimum variation within locus (in an attempt to prevent duplicating the intercept)
\item loci identities using a SNP which specifies the SNP coordinates as well as the reference and alternative alleles
\item mean sparsity per locus
\item mean sparsity per sample/entry/pool
}
}
\examples{
list_sim = fn_simulate_data(verbose=TRUE)
G = fn_load_genotype(list_sim$fname_geno_vcf, retain_minus_one_alleles_per_locus=FALSE)
maf = 0.05
sdev_min = 0.0001
verbose = TRUE
### Simulate SNP list for filtering
mat_loci = matrix(unlist(strsplit(colnames(G), "\t")), byrow=TRUE, ncol=3)
vec_loci = unique(paste0(mat_loci[,1], "\t", mat_loci[,2]))
mat_loci = matrix(unlist(strsplit(vec_loci, "\t")), byrow=TRUE, ncol=2)
df_snp_list = data.frame(CHROM=mat_loci[,1], POS=as.numeric(mat_loci[,2]), REF_ALT=paste0("allele_1,allele_alt"))
df_snp_list$REF_ALT[1:100] = "allele_2,allele_4"
colnames(df_snp_list) = c("#CHROM", "POS", "REF,ALT")
fname_snp_list = "tmp_snp_list.txt"
write.table(df_snp_list, file=fname_snp_list, sep="\t", row.names=FALSE, col.names=TRUE, quote=FALSE)
### Filter
G_filtered = fn_filter_loci(G=G, maf=0.05, fname_snp_list=fname_snp_list, verbose=TRUE)
}
